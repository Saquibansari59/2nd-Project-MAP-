name: Add HW

on:
  workflow_dispatch:
    inputs:
      user:  # Username for reference (optional)
        type: string
        required: false
      variable:  # Variable to add to map.py
        type: string
        required: true

concurrency:
  group: "add-hello-world-${{ github.ref }}"  # Ensures jobs run one at a time per ref
  cancel-in-progress: false                 # Wait for previous job to complete

jobs:
  add-hello-world:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create lock file
        run: |
          if [ -f .gitlock ]; then
            echo "Another job is currently running. Exiting."
            exit 1
          else
            echo "Locking the file for changes."
            touch .gitlock
          fi

      - name: Add "Hello World" to map.py
        run: |
          echo '${{ inputs.variable }}' >> map.py

      - name: Configure Git user (optional, adjust as needed)
        run: |
          git config --local user.name saquibansari59
          git config --local user.email saquibansari59@gmail.com

      - name: Check Changes
        run: git status

      - name: Check diff
        id: diff_check
        run: if [[ `git diff` ]] ; then echo "diff=yes" >> $GITHUB_OUTPUT; fi

      - name: Stage Changed Files
        run: git add .

      - name: Commit Changed Files (if changes detected)
        if: ${{ steps.diff_check.outputs.diff == 'yes' }}
        run: git commit -m "Added ${{ inputs.variable }} to map.py and updated related files" --no-verify

      - name: Fetch from main
        run: git fetch https://github.com/Saquibansari59/2nd-Project-MAP-.git

      - name: Pull changes from main with rebase
        run: git pull --rebase https://github.com/Saquibansari59/2nd-Project-MAP-.git

      - name: Push Changes to main (if changes detected)
        if: ${{ steps.diff_check.outputs.diff == 'yes' }}
        run: git push https://github.com/Saquibansari59/2nd-Project-MAP-.git

      - name: Remove lock file
        run: rm .gitlock

      - name: Ensure lock file is removed (always run, even on failure)
        if: failure() || success()
        run: rm -f .gitlock
